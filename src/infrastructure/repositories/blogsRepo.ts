import { Blog } from '../types/Blog';

// In-memory array –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–≥–æ–≤
let blogs: Blog[] = [];

export const blogsRepo = {
    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –±–ª–æ–≥–∏. */
    getAll: () => blogs,

    /** –ù–∞—Ö–æ–¥–∏—Ç –±–ª–æ–≥ –ø–æ ID. */
    getById: (id: string) => blogs.find(b => b.id === id),

    /** –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–≥, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID. */
    create: (data: Omit<Blog, 'id'>) => {
        // ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        const newBlog: Blog = { id: Date.now().toString(), ...data };
        blogs.push(newBlog);
        return newBlog;
    },

    /** –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–≥ –ø–æ ID. */
    update: (id: string, data: Omit<Blog, 'id'>) => {
        const index = blogs.findIndex(b => b.id === id);
        if (index === -1) return null;

        blogs[index] = { id, ...data };
        return blogs[index];
    },

    /** –£–¥–∞–ª—è–µ—Ç –±–ª–æ–≥ –ø–æ ID. */
    delete: (id: string) => {
        const index = blogs.findIndex(b => b.id === id);
        if (index === -1) return false;

        blogs.splice(index, 1);
        return true;
    },

    /** üí° –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è DELETE /testing/all-data. */
    clear: () => { blogs = []; }
};
