import { Request, Response, NextFunction } from 'express';
import { body, validationResult, FieldValidationError } from 'express-validator';
import { postsRepo} from "../../repositories/postsRepo";
import { blogsRepo} from "../../repositories/blogsRepo";
import { Post } from  "../../types/Post";
import { HttpStatus} from "../../types/HttpStatus";

// --- (–í–∞–ª–∏–¥–∞—Ü–∏—è postValidation –∏ handleValidationErrors –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –ø–æ—Å—Ç–∞ (Middleware)
 */
export const postValidation = [
    body('title')
        .isString().withMessage('Title must be a string')
        .trim()
        .isLength({ min: 1, max: 30 }).withMessage('Title length should be 1-30 chars'),

    body('shortDescription')
        .isString().withMessage('Short description must be a string')
        .trim()
        .isLength({ min: 1, max: 100 }).withMessage('Short description length should be 1-100 chars'),

    body('content')
        .isString().withMessage('Content must be a string')
        .trim()
        .isLength({ min: 1, max: 1000 }).withMessage('Content length should be 1-1000 chars'),

    body('blogId')
        .isString().withMessage('blogId must be a string')
        .custom(id => {
            if (!blogsRepo.getById(id)) {
                throw new Error('Blog not found');
            }
            return true;
        }),
];

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        const formattedErrors = errors.array().map(err => {
            const isFieldValidationError = 'path' in err;

            return {
                field: isFieldValidationError ? (err as FieldValidationError).path : 'unknown',
                message: err.msg,
            };
        });

        const uniqueErrors = Array.from(
            new Map(formattedErrors.map(e => [e.field, e])).values()
        );

        return res.status(HttpStatus.BAD_REQUEST).send({ errorsMessages: uniqueErrors });
    }
    next();
};

// ---
// ## –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ—É—Ç–æ–≤ (–õ–û–ì–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ê)
// ---

export const getPosts = (req: Request, res: Response) => {
    res.status(HttpStatus.OK).send(postsRepo.getAll());
};

export const getPostById = (req: Request, res: Response) => {
    const post = postsRepo.getById(req.params.id);
    if (!post) return res.sendStatus(HttpStatus.NOT_FOUND);
    res.status(HttpStatus.OK).send(post);
};

export const createPost = (req: Request<{}, {}, Post>, res: Response) => {
    const { title, shortDescription, content, blogId } = req.body;

    // üí° 1. –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å blogName (–≤–∞–ª–∏–¥–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const blog = blogsRepo.getById(blogId);

    // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã TypeScript –∑–Ω–∞–ª, —á—Ç–æ blog —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    if (!blog) return res.sendStatus(HttpStatus.NOT_FOUND);

    // üí° 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞, –≤–∫–ª—é—á–∞—è blogName
    const postDataToCreate = {
        title,
        shortDescription,
        content,
        blogId,
        blogName: blog.name // üëà –î–û–ë–ê–í–õ–ï–ù–û
    };

    const newPost = postsRepo.create(postDataToCreate);
    res.status(HttpStatus.CREATED).send(newPost);
};

export const updatePost = (req: Request<{id: string}, {}, Post>, res: Response) => {
    const { title, shortDescription, content, blogId } = req.body;

    let blogName = req.body.blogName; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞

    // üí° 1. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å blogId, –º—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ blogName —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    // (–∏ —á—Ç–æ blogId –≤–∞–ª–∏–¥–µ–Ω, —á—Ç–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ middleware)
    if (blogId) {
        const blog = blogsRepo.getById(blogId);
        if (blog) {
            blogName = blog.name; // –ó–∞–º–µ–Ω—è–µ–º blogName –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        }
    }

    const postDataToUpdate = { title, shortDescription, content, blogId, blogName };

    const updated = postsRepo.update(req.params.id, postDataToUpdate);
    if (!updated) return res.sendStatus(HttpStatus.NOT_FOUND);
    res.sendStatus(HttpStatus.NO_CONTENT);
};

export const deletePost = (req: Request, res: Response) => {
    const deleted = postsRepo.delete(req.params.id);
    if (!deleted) return res.sendStatus(HttpStatus.NOT_FOUND);
    res.sendStatus(HttpStatus.NO_CONTENT);
};
